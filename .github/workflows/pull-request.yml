name: PR Checks and Deploy

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  pull-requests: write
  contents: read

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.13.1'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '9.15.4'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check formatting
        run: pnpm format:check

      - name: Run type check and linting
        run: pnpm check

  deploy-worker:
    name: Deploy Cloudflare Worker
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.13.1'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '9.15.4'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Worker
        run: pnpm build:worker

      - name: Deploy Worker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: pnpm deploy:worker

      - name: Get Worker URL
        id: get-url
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          VERSIONS=$(pnpm wrangler versions list --json)
          LATEST_VERSION=$(echo "$VERSIONS" | jq -r '.[-1]')
          VERSION_ID=$(echo "$LATEST_VERSION" | jq -r '.id')
          PREVIEW_ID=${VERSION_ID%%-*}
          PREVIEW_URL="https://${PREVIEW_ID}-figutrack.gavlois.workers.dev"
          echo "worker-url=$PREVIEW_URL" >> $GITHUB_OUTPUT

      - name: Update PR
        uses: actions/github-script@v7
        with:
          script: |
            const url = process.env.WORKER_URL || '${{ steps.get-url.outputs.worker-url }}'
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            })
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Preview URL')
            )
            
            const body = `ðŸš€ Preview URL: ${url}`
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              })
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              })
            }
